{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\engm8\\\\OneDrive\\\\Desktop\\\\coding\\\\top-sellers\\\\src\\\\Dashboard.js\",\n    _s = $RefreshSig$();\n\nimport styles from './Dashboard.module.css';\nimport { LoadingIcon } from './Icons'; // import { getOrders } from './dataService';\n\nimport useOrders from './hooks/useOrders';\nimport { useState, useEffect } from 'react'; // Overview:\n// You are provided with an incomplete <Dashboard /> component.\n// Demo video - You can view how the completed functionality should look at: https://drive.google.com/file/d/1lH8ojlvb62I_9z3jGxhNEY_-8S4trNo7/view?usp=sharing \n// This demo video uses the same dataset, so your total and ranking calculations should match it\n// You are not allowed to add any additional HTML elements.\n// You are not allowed to use refs.\n// Requirements:\n// Once the <Dashboard /> component is mounted, load the order data using the getOrders function imported above\n// Once all the data is successfully loaded, hide the loading icon\n// Calculate and display the total revenue\n// Display a ranking showing the sellers ordered by their total revenue using the <SellerRanking /> component. \n// The seller with the highest revenue should be shown at the top with position 1. \n// All the revenue values should only consider Confirmed orders. Canceled orders should be ignored.\n// All dollar amounts should be displayed to 2 decimal places\n// The getOrders function times out frequently. Display any errors returned while loading the data in the provided div. \n// The retry button should clear the error and reattempt the request\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SellerRanking = ({\n  position,\n  sellerName,\n  sellerRevenue\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n      children: position\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: sellerName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: [\"$\", sellerRevenue]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n\n_c = SellerRanking;\n\nconst Dashboard = () => {\n  _s();\n\n  const [returnedOrders] = useOrders();\n  const [orders, setOrders] = useState([]);\n  const [errors, setErrors] = useState('');\n  const [rev, setRev] = useState(0);\n  useEffect(() => {\n    if (typeof returnedOrders !== 'string') {\n      let sortedOrders = returnedOrders.filter(order => order.status === 'Confirmed');\n      sortedOrders = sortedOrders.sort((a, b) => b.revenue - a.revenue);\n      setOrders(sortedOrders);\n    } else {\n      setErrors(returnedOrders);\n    }\n  }, [returnedOrders]);\n  useEffect(() => {\n    if (orders.length) {\n      let totalRev = 0;\n\n      for (const order of orders) {\n        totalRev += order.revenue;\n      }\n\n      totalRev = Math.round(totalRev);\n      console.log(totalRev);\n      setRev(totalRev);\n    }\n  }, [orders]);\n\n  function retry() {\n    setOrders(prev => {\n      const lastItem = prev.pop();\n      return [...prev, lastItem];\n    });\n  }\n\n  console.log(orders);\n  console.log(errors);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: styles.header,\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Top Sellers\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [orders.length === 0 && /*#__PURE__*/_jsxDEV(LoadingIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 33\n      }, this), errors && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.errorContainer,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.errorMessage,\n          children: errors\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => retry(),\n          children: \"Retry\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: styles.summary,\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Total revenue: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            id: \"totalRevenue\",\n            children: [\"$\", rev]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Seller Rankings\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: styles.table,\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Position\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Seller Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Seller Revenue\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: orders.map((order, i) => /*#__PURE__*/_jsxDEV(SellerRanking, {\n            position: i + 1,\n            sellerName: order.sellerName,\n            sellerRevenue: order.revenue\n          }, order.orderDate, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Dashboard, \"920ufByPUsFFzm5z41bC1/4T1ps=\", false, function () {\n  return [useOrders];\n});\n\n_c2 = Dashboard;\nexport default Dashboard;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SellerRanking\");\n$RefreshReg$(_c2, \"Dashboard\");","map":{"version":3,"sources":["C:/Users/engm8/OneDrive/Desktop/coding/top-sellers/src/Dashboard.js"],"names":["styles","LoadingIcon","useOrders","useState","useEffect","SellerRanking","position","sellerName","sellerRevenue","Dashboard","returnedOrders","orders","setOrders","errors","setErrors","rev","setRev","sortedOrders","filter","order","status","sort","a","b","revenue","length","totalRev","Math","round","console","log","retry","prev","lastItem","pop","header","errorContainer","errorMessage","summary","table","map","i","orderDate"],"mappings":"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","sourcesContent":["import styles from './Dashboard.module.css';\nimport { LoadingIcon } from './Icons';\n// import { getOrders } from './dataService';\nimport useOrders from './hooks/useOrders'\nimport { useState, useEffect } from 'react';\n\n// Overview:\n// You are provided with an incomplete <Dashboard /> component.\n// Demo video - You can view how the completed functionality should look at: https://drive.google.com/file/d/1lH8ojlvb62I_9z3jGxhNEY_-8S4trNo7/view?usp=sharing \n// This demo video uses the same dataset, so your total and ranking calculations should match it\n// You are not allowed to add any additional HTML elements.\n// You are not allowed to use refs.\n\n// Requirements:\n// Once the <Dashboard /> component is mounted, load the order data using the getOrders function imported above\n// Once all the data is successfully loaded, hide the loading icon\n// Calculate and display the total revenue\n// Display a ranking showing the sellers ordered by their total revenue using the <SellerRanking /> component. \n// The seller with the highest revenue should be shown at the top with position 1. \n// All the revenue values should only consider Confirmed orders. Canceled orders should be ignored.\n// All dollar amounts should be displayed to 2 decimal places\n// The getOrders function times out frequently. Display any errors returned while loading the data in the provided div. \n// The retry button should clear the error and reattempt the request\n\n\nconst SellerRanking = ({ position, sellerName, sellerRevenue }) => {\n  return (\n    <tr>\n      <td>{position}</td>\n      <td>{sellerName}</td>\n      <td>${sellerRevenue}</td>\n    </tr>    \n  );\n}\n\nconst Dashboard = () => {\n  const [returnedOrders] = useOrders()\n  const [orders, setOrders] = useState([])\n  const [errors, setErrors] = useState('')\n  const [rev, setRev] = useState(0)\n \n\n  useEffect(() => {\n    if (typeof returnedOrders !== 'string') {\n      let sortedOrders = returnedOrders.filter(order => order.status === 'Confirmed')\n      sortedOrders = sortedOrders.sort((a, b) => b.revenue-a.revenue)\n      setOrders(sortedOrders)\n    } else {\n      setErrors(returnedOrders)\n    }\n  }, [returnedOrders])\n\n  useEffect(() => {\n    if (orders.length) {\n      let totalRev = 0\n      for (const order of orders) {\n        totalRev+= order.revenue\n      }\n      totalRev = Math.round(totalRev)\n      console.log(totalRev)\n      setRev(totalRev)\n    }\n  }, [orders])\n\n  function retry() {\n    setOrders(prev => {\n      const lastItem = prev.pop()\n      return [...prev, lastItem]\n    })\n  }\n\n  console.log(orders)\n  console.log(errors)\n  return (\n    <div>\n      <header className={styles.header}>        \n        <h1>Top Sellers</h1>        \n      </header>\n      <main>\n        {orders.length === 0 && <LoadingIcon />}  \n        {/* Place any data fetching errors inside this div, only render the div if there are errors */}\n        {errors&&<div className={styles.errorContainer}>\n          <div className={styles.errorMessage}>{errors}</div>\n          <button onClick={() => retry()}>Retry</button>\n        </div>}\n        <div>\n          <p className={styles.summary}>\n            <strong>Total revenue: </strong> \n            <span id=\"totalRevenue\">${rev}</span>\n            </p>       \n        </div>\n        <h2>Seller Rankings</h2>\n        <table className={styles.table}>\n          <thead>\n            <tr>\n              <th>Position</th>\n              <th>Seller Name</th>\n              <th>Seller Revenue</th>\n            </tr>\n          </thead>\n          <tbody>\n          {orders.map((order, i) => \n              <SellerRanking key={order.orderDate} \n              position={i+1} \n              sellerName={order.sellerName} \n              sellerRevenue={order.revenue}\n              />)\n          }\n          </tbody>\n        </table>\n      </main>\n    </div>\n  );\n};\n\nexport default Dashboard;"]},"metadata":{},"sourceType":"module"}