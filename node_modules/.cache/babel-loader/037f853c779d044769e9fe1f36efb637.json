{"ast":null,"code":"export function getOrders() {\n  return getData('/orders.json').then(result => result.orders.map(order => ({ ...order,\n    orderDate: new Date(order.orderDate)\n  }))).catch(e => e);\n}\n\nfunction getData(endpoint) {\n  const delay = (0.5 + Math.random() * 2) * 1000;\n  return new Promise((resolve, reject) => {\n    setTimeout(function () {\n      fetch(endpoint).then(res => {\n        if (isRequestSuccessful()) {\n          resolve(res.json());\n        } else {\n          reject(new Error(\"The request has timed out, please try again\"));\n        }\n      });\n    }, delay);\n  });\n}\n\nfunction isRequestSuccessful() {\n  const errorFrequency = 0.5;\n  return Math.random() >= errorFrequency;\n}","map":{"version":3,"sources":["C:/Users/engm8/OneDrive/Desktop/coding/top-sellers/src/dataService.js"],"names":["getOrders","getData","then","result","orders","map","order","orderDate","Date","catch","e","endpoint","delay","Math","random","Promise","resolve","reject","setTimeout","fetch","res","isRequestSuccessful","json","Error","errorFrequency"],"mappings":"AAAA,OAAO,SAASA,SAAT,GAAqB;AACxB,SAAOC,OAAO,CAAC,cAAD,CAAP,CACFC,IADE,CACGC,MAAM,IAAIA,MAAM,CAACC,MAAP,CAAcC,GAAd,CAAkBC,KAAK,KAAK,EACxC,GAAGA,KADqC;AAExCC,IAAAA,SAAS,EAAE,IAAIC,IAAJ,CAASF,KAAK,CAACC,SAAf;AAF6B,GAAL,CAAvB,CADb,EAIEE,KAJF,CAIQC,CAAC,IAAIA,CAJb,CAAP;AAKH;;AAED,SAAST,OAAT,CAAiBU,QAAjB,EAA2B;AACvB,QAAMC,KAAK,GAAG,CAAC,MAAMC,IAAI,CAACC,MAAL,KAAgB,CAAvB,IAA4B,IAA1C;AACA,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpCC,IAAAA,UAAU,CAAC,YAAY;AACnBC,MAAAA,KAAK,CAACR,QAAD,CAAL,CACKT,IADL,CACUkB,GAAG,IAAI;AACT,YAAGC,mBAAmB,EAAtB,EAA0B;AACtBL,UAAAA,OAAO,CAACI,GAAG,CAACE,IAAJ,EAAD,CAAP;AACH,SAFD,MAGK;AACDL,UAAAA,MAAM,CAAC,IAAIM,KAAJ,CAAU,6CAAV,CAAD,CAAN;AACH;AACJ,OARL;AASH,KAVS,EAUPX,KAVO,CAAV;AAWH,GAZM,CAAP;AAaH;;AAED,SAASS,mBAAT,GAA+B;AAC3B,QAAMG,cAAc,GAAG,GAAvB;AACA,SAAOX,IAAI,CAACC,MAAL,MAAiBU,cAAxB;AACH","sourcesContent":["export function getOrders() {\r\n    return getData('/orders.json')\r\n        .then(result => result.orders.map(order => ({\r\n            ...order,\r\n            orderDate: new Date(order.orderDate)\r\n        }))).catch(e => e);\r\n}\r\n\r\nfunction getData(endpoint) {\r\n    const delay = (0.5 + Math.random() * 2) * 1000;\r\n    return new Promise((resolve, reject) => {\r\n        setTimeout(function () {\r\n            fetch(endpoint)\r\n                .then(res => {\r\n                    if(isRequestSuccessful()) {\r\n                        resolve(res.json());\r\n                    }\r\n                    else {\r\n                        reject(new Error(\"The request has timed out, please try again\"));\r\n                    }\r\n                });\r\n        }, delay);\r\n    });\r\n}\r\n\r\nfunction isRequestSuccessful() {\r\n    const errorFrequency = 0.5;\r\n    return Math.random() >= errorFrequency;\r\n}"]},"metadata":{},"sourceType":"module"}